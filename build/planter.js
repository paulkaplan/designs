// Generated by CoffeeScript 1.9.2
var Planter;

Planter = function(canvas) {
  var baseTabWidth, baseWidth, download, draw, materialThickness, pointToString, polygonToFabric, polygonToSvg, rect, scale, settings, sideHeight, sideTabWidth, sideWidth, that;
  that = {};
  baseWidth = ko.observable(5);
  baseTabWidth = ko.computed(function() {
    return baseWidth() / 4;
  });
  sideWidth = ko.observable(4);
  sideHeight = ko.observable(5);
  sideTabWidth = ko.computed(function() {
    return sideWidth() / 4;
  });
  materialThickness = ko.observable(0.25);
  scale = 50;
  polygonToSvg = function(poly, translation) {
    if (translation == null) {
      translation = [0, 0];
    }
    return "<polygon\n  transform=\"translate(" + translation[0] + ", " + translation[1] + ")\"\n  fill=\"none\"\n  stroke=\"black\"\n  points='" + (poly.map(pointToString).join(" ")) + "'\n/>";
  };
  pointToString = function(point) {
    return point.x + ", " + point.y;
  };
  rect = function(w, h) {
    return [
      {
        x: -w / 2,
        y: -h / 2
      }, {
        x: -w / 2,
        y: h / 2
      }, {
        x: w / 2,
        y: h / 2
      }, {
        x: w / 2,
        y: -h / 2
      }
    ];
  };
  Array.prototype.translate = function(x, y) {
    var i, len, point;
    for (i = 0, len = this.length; i < len; i++) {
      point = this[i];
      point.x += x;
      point.y += y;
    }
    return this;
  };
  Array.prototype.scale = function(scale) {
    var i, len, point;
    for (i = 0, len = this.length; i < len; i++) {
      point = this[i];
      point.x *= scale;
      point.y *= scale;
    }
    return this;
  };
  polygonToFabric = function(poly) {
    var fabricPoly;
    fabricPoly = new fabric.Polygon(poly, {
      fill: 'transparent',
      stroke: 'black'
    }, true);
    return fabricPoly;
  };
  draw = ko.computed(function() {
    var base, baseTab, baseTabOffset, baseTabs, halfSideHeight, halfSideWidth, halfWidth, i, insetPanel, len, outsetPanel, sideBaseTabOffset, sideTabOffset, svg;
    halfWidth = baseWidth() / 2;
    halfSideWidth = sideWidth() / 2;
    halfSideHeight = sideHeight() / 2;
    baseTabOffset = halfWidth - (halfWidth - halfSideWidth + materialThickness() / 2);
    base = rect(baseWidth(), baseWidth()).scale(scale);
    baseTabs = [rect(materialThickness(), baseTabWidth()).scale(scale).translate(baseTabOffset * scale, 0), rect(materialThickness(), baseTabWidth()).scale(scale).translate(-baseTabOffset * scale, 0), rect(baseTabWidth(), materialThickness()).scale(scale).translate(0, -baseTabOffset * scale), rect(baseTabWidth(), materialThickness()).scale(scale).translate(0, baseTabOffset * scale)];
    sideTabOffset = halfSideHeight - sideTabWidth() / 2;
    sideBaseTabOffset = halfSideWidth - baseTabWidth() / 2;
    outsetPanel = [
      {
        x: -halfSideWidth,
        y: halfSideHeight
      }, {
        x: halfSideWidth,
        y: halfSideHeight
      }, {
        x: halfSideWidth,
        y: halfSideHeight - sideTabOffset
      }, {
        x: halfSideWidth - materialThickness(),
        y: halfSideHeight - sideTabOffset
      }, {
        x: halfSideWidth - materialThickness(),
        y: -halfSideHeight + sideTabOffset
      }, {
        x: halfSideWidth,
        y: -halfSideHeight + sideTabOffset
      }, {
        x: halfSideWidth,
        y: -halfSideHeight
      }, {
        x: halfSideWidth - sideBaseTabOffset,
        y: -halfSideHeight
      }, {
        x: halfSideWidth - sideBaseTabOffset,
        y: -halfSideHeight - materialThickness()
      }, {
        x: -halfSideWidth + sideBaseTabOffset,
        y: -halfSideHeight - materialThickness()
      }, {
        x: -halfSideWidth + sideBaseTabOffset,
        y: -halfSideHeight
      }, {
        x: -halfSideWidth,
        y: -halfSideHeight
      }, {
        x: -halfSideWidth,
        y: -halfSideHeight + sideTabOffset
      }, {
        x: -halfSideWidth + materialThickness(),
        y: -halfSideHeight + sideTabOffset
      }, {
        x: -halfSideWidth + materialThickness(),
        y: halfSideHeight - sideTabOffset
      }, {
        x: -halfSideWidth,
        y: halfSideHeight - sideTabOffset
      }, {
        x: -halfSideWidth,
        y: halfSideHeight
      }
    ].scale(scale);
    insetPanel = [
      {
        x: -halfSideWidth + materialThickness(),
        y: halfSideHeight
      }, {
        x: halfSideWidth - materialThickness(),
        y: halfSideHeight
      }, {
        x: halfSideWidth - materialThickness(),
        y: halfSideHeight - sideTabOffset
      }, {
        x: halfSideWidth,
        y: halfSideHeight - sideTabOffset
      }, {
        x: halfSideWidth,
        y: -halfSideHeight + sideTabOffset
      }, {
        x: halfSideWidth - materialThickness(),
        y: -halfSideHeight + sideTabOffset
      }, {
        x: halfSideWidth - materialThickness(),
        y: -halfSideHeight
      }, {
        x: halfSideWidth - sideBaseTabOffset,
        y: -halfSideHeight
      }, {
        x: halfSideWidth - sideBaseTabOffset,
        y: -halfSideHeight - materialThickness()
      }, {
        x: -halfSideWidth + sideBaseTabOffset,
        y: -halfSideHeight - materialThickness()
      }, {
        x: -halfSideWidth + sideBaseTabOffset,
        y: -halfSideHeight
      }, {
        x: -halfSideWidth + materialThickness(),
        y: -halfSideHeight
      }, {
        x: -halfSideWidth + materialThickness(),
        y: -halfSideHeight + sideTabOffset
      }, {
        x: -halfSideWidth,
        y: -halfSideHeight + sideTabOffset
      }, {
        x: -halfSideWidth,
        y: halfSideHeight - sideTabOffset
      }, {
        x: -halfSideWidth + materialThickness(),
        y: halfSideHeight - sideTabOffset
      }, {
        x: -halfSideWidth + materialThickness(),
        y: halfSideHeight
      }
    ].scale(scale);
    svg = "";
    svg += polygonToSvg(base, [baseWidth() * scale / 2 + 1, (baseWidth() * 2 + materialThickness()) * scale / 2]);
    for (i = 0, len = baseTabs.length; i < len; i++) {
      baseTab = baseTabs[i];
      svg += polygonToSvg(baseTab, [baseWidth() * scale / 2 + 1, (baseWidth() * 2 + materialThickness()) * scale / 2]);
    }
    svg += polygonToSvg(outsetPanel, [(baseWidth() * 1.5 + materialThickness()) * scale, (sideHeight() + materialThickness() * 3) * scale / 2]);
    svg += polygonToSvg(outsetPanel, [(baseWidth() * 1.5 + materialThickness()) * scale, (sideHeight() * 3 + materialThickness() * 7) * scale / 2]);
    svg += polygonToSvg(insetPanel, [(baseWidth() * 2.5 + materialThickness()) * scale, (sideHeight() + materialThickness() * 3) * scale / 2]);
    svg += polygonToSvg(insetPanel, [(baseWidth() * 2.5 + materialThickness()) * scale, (sideHeight() * 3 + materialThickness() * 7) * scale / 2]);
    document.getElementById('output-svg').innerHTML = "";
    setTimeout(function() {
      return document.getElementById('output-svg').innerHTML = svg;
    }, 10);
    return svg;
  });
  download = function() {
    var svgFooter, svgHeader;
    svgHeader = "<?xml version=\"1.0\" standalone=\"no\"?>\n<svg xmlns=\"http://www.w3.org/2000/svg\" version=\"1.0\"\n  width=\"1000\" height=\"1000\" viewBox=\"0 0 1000 1000\" >";
    svgFooter = "</svg>";
    return saveAs(new Blob([svgHeader + draw() + svgFooter], {
      type: 'text/plain'
    }), 'planter.svg');
  };
  that.download = download;
  that.materialThickness = materialThickness;
  that.baseWidth = baseWidth;
  that.baseTabWidth = baseTabWidth;
  that.sideWidth = sideWidth;
  that.sideHeight = sideHeight;
  that.sideTabWidth = sideTabWidth;
  settings = document.getElementById('settings');
  ko.applyBindings(that, settings);
  return that;
};
